import 'package:fixnum/fixnum.dart';

class Hashviz {
  final int _size;
  List<int> _randSeed = [];

  /// Constructor for the [Hashviz] class.
  ///
  /// Throws an [ArgumentError] if the [size] of the blocks in the visualization is not a positive integer.
  Hashviz({
    required int size,
  })  : _size = _isPositive(size)
            ? size
            : throw ArgumentError("Size must be a positive integer.");

  /// Method to generate image data from a hash string
  ///
  /// The image data is generated by creating pixel data
  /// based on the [hash] string. Returns a List of integers representing the image data.
  List<int> generatePatternData(String hash) {
    _randSeed = createRandSeed(hash);

    return createImageData(_size);
  }

  /// Method to create a random seed from the hash
  ///
  /// The seed is used to generate consistent patterns based on the hash input.
  List<int> createRandSeed(String seed) {
    var randSeed = List<int>.filled(4, 0);

    for (int i = 0; i < seed.length; i++) {
      randSeed[i % 4] =
          (randSeed[i % 4] << 5) - randSeed[i % 4] + seed.codeUnitAt(i);
    }
    return randSeed;
  }

  /// Generates a random value based on the seed
  double rand() {
    // based on Java's String.hashCode(), expanded to 4 32bit values
    final t = Int32(_randSeed[0] ^ Int32(_randSeed[0] << 11).toInt());
    final third = Int32(_randSeed[3]);

    _randSeed[0] = _randSeed[1];
    _randSeed[1] = _randSeed[2];
    _randSeed[2] = _randSeed[3];
    _randSeed[3] = ((third ^ (third >> 19)) ^ t ^ (t >> 8)).toInt();

    return (Int32(_randSeed[3] >>> 0)).toInt() / ((1 << 31) >>> 0);
  }

  /// Creates image data, an array of blocks
  ///
  /// The array generated represents the blocky pattern to be drawn.
  /// A value of 1 or 2 means a block should be drawn, while 0 indicates the background.
  List<int> createImageData(int size) {
    final width = size; // Only support square icons for now
    final height = size;

    final dataWidth = (width / 2).ceil();
    final mirrorWidth = width - dataWidth;

    var data = <int>[];
    for (var y = 0; y < height; y++) {
      var row = <int>[];
      for (var x = 0; x < dataWidth; x++) {
        // this makes foreground and background color to have a 43% (1/2.3) probability
        // spot color has 13% chance
        row.add((rand() * 2.3).floor());
      }
      final r = row.sublist(0, mirrorWidth).toList();
      row.addAll(r.reversed.toList());

      for (var i = 0; i < row.length; i++) {
        data.add(row[i]);
      }
    }

    return data;
  }

  static bool _isPositive(int value) {
    return value > 0;
  }
}
