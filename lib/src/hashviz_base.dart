import 'package:fixnum/fixnum.dart';

/// A Hash visualization class from a provided hash as blocks of pixels.
class Hashviz {
  String hash;
  int size;
  List<int> _randSeed = [];

  /// Create a visualization hash class.
  ///
  /// Depending on provided [hash] and [size] a visualization blocks will be
  /// generated. [hash] is the string to be represented as visualization
  /// blocks. [size] represents the blocks size in the visualization, if it
  /// is negative only the absolute value will be considered.
  Hashviz({
    required String hash,
    int size = 10,
  })  : hash = hash,
        size = size.abs();

  /// A 2D-array of image blocks (data).
  ///
  /// The image blocks (data) is generated by creating pixels based on the
  /// [Hashviz.hash] string. Returns a List of integers representing the image
  /// data.
  List<int> get visualizationBlocks {
    _randSeed = _createRandomSeed(hash);

    return _createImageBlocks(size);
  }

  /// Method to create a random seed from the hash
  ///
  /// The seed is used to generate consistent patterns based on the hash input.
  List<int> _createRandomSeed(String seed) {
    var randomSeed = List<int>.filled(4, 0);

    for (int i = 0; i < seed.length; i++) {
      randomSeed[i % 4] =
          (randomSeed[i % 4] << 5) - randomSeed[i % 4] + seed.codeUnitAt(i);
    }

    return randomSeed;
  }

  /// Generates a random value based on the seed
  double _randomFromSeed() {
    // based on Java's String.hashCode(), expanded to 4 32bit values
    final t = Int32(_randSeed[0] ^ Int32(_randSeed[0] << 11).toInt());
    final third = Int32(_randSeed[3]);

    _randSeed[0] = _randSeed[1];
    _randSeed[1] = _randSeed[2];
    _randSeed[2] = _randSeed[3];
    _randSeed[3] = ((third ^ (third >> 19)) ^ t ^ (t >> 8)).toInt();

    return (Int32(_randSeed[3] >>> 0)).toInt() / ((1 << 31) >>> 0);
  }

  /// Creates image data.
  ///
  /// The array generated represents the pattern to be drawn. A value of 1 or
  /// 2 means a block should be drawn, while 0 indicates the background.
  ///
  /// For now only a square images are supported.
  List<int> _createImageBlocks(int size) {
    final width = size;
    final height = size;

    final dataWidth = (width / 2).ceil();
    final mirrorWidth = width - dataWidth;

    var blocks = <int>[];
    for (var y = 0; y < height; y++) {
      var row = <int>[];
      for (var x = 0; x < dataWidth; x++) {
        // this makes foreground and background color to have a 43% (1/2.3)
        // probability spot color has 13% chance
        row.add((_randomFromSeed() * 2.3).floor());
      }
      final r = row.sublist(0, mirrorWidth).toList();
      row.addAll(r.reversed.toList());

      for (var i = 0; i < row.length; i++) {
        blocks.add(row[i]);
      }
    }

    return blocks;
  }
}
